// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const sequelize = require('./models/index');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ CORS –∏ JSON
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.json({ message: 'ERP Aero API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É –∏–∑ .env –∏–ª–∏ 5000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const PORT = process.env.PORT || 5000;
 app.listen(PORT, async () => {
    try {
        await sequelize.authenticate();
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å–ø–µ—à–Ω–æ!`)
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error)
    }
    
  
});
